<div class="container-fluid py-4">
  <div class="row mb-4">
    <div class="col-12 d-flex justify-content-between align-items-center">
      <h1 class="h3">User Management</h1>
      <div>
        <button type="button" class="btn btn-primary me-2" data-bs-toggle="modal" data-bs-target="#createUserModal">
          <i class="bi bi-person-plus me-1"></i> Add User
        </button>
        <button type="button" class="btn btn-outline-secondary" data-bs-toggle="modal" data-bs-target="#createGroupModal">
          <i class="bi bi-people me-1"></i> Add Group
        </button>
      </div>
    </div>
  </div>

  <div class="row">
    <div class="col-12">
      <div class="card shadow-sm">
        <div class="card-header bg-transparent d-flex justify-content-between align-items-center py-3">
          <h2 class="card-title h5 mb-0">Users</h2>
          <div class="input-group input-group-sm" style="max-width: 300px;">
            <span class="input-group-text bg-transparent border-end-0">
              <i class="bi bi-search"></i>
            </span>
            <input type="text" class="form-control border-start-0" id="userSearch" 
                  placeholder="Search users..." aria-label="Search users">
          </div>
        </div>
        <div class="card-body">
          <div class="table-responsive">
            <table class="table table-hover align-middle" id="usersTable">
              <thead>
                <tr>
                  <th scope="col">Username</th>
                  <th scope="col">Email</th>
                  <th scope="col">Groups</th>
                  <th scope="col">Role</th>
                  <th scope="col" class="text-end">Actions</th>
                </tr>
              </thead>
              <tbody>
                {{#if users.length}}
                  {{#each users}}
                    <tr>
                      <td>
                        <div class="d-flex align-items-center">
                          <div class="avatar avatar-sm bg-light rounded-circle me-2 d-flex align-items-center justify-content-center">
                            <span class="text-secondary">{{firstChar this.username}}</span>
                          </div>
                          <span>{{this.username}}</span>
                        </div>
                      </td>
                      <td>
                        <a href="mailto:{{this.email}}" class="text-decoration-none">{{this.email}}</a>
                      </td>
                      <td>
                        {{#if this.groups.length}}
                          {{#each this.groups}}
                            <span class="badge bg-light text-dark me-1">{{this.name}}</span>
                          {{/each}}
                        {{else}}
                          <span class="text-muted fst-italic">No groups</span>
                        {{/if}}
                      </td>
                      <td>
                        <span class="badge 
                          {{#if (eq this.role 'ADMIN')}}bg-danger{{/if}}
                          {{#if (eq this.role 'EDITOR')}}bg-warning text-dark{{/if}}
                          {{#if (eq this.role 'VIEWER')}}bg-info text-dark{{/if}}">
                          {{this.role}}
                        </span>
                      </td>
                      <td class="text-end">
                        <div class="btn-group btn-group-sm">
                          <a href="/iam/users/{{this.id}}/edit" class="btn btn-outline-secondary" 
                             aria-label="Edit {{this.username}}" title="Edit user">
                            <i class="bi bi-pencil-square"></i>
                          </a>
                          <button type="button" class="btn btn-outline-danger"
                            aria-label="Delete {{this.username}}"
                            title="Delete user"
                            hx-delete="/api/v1/users/{{this.id}}"
                            hx-confirm="Are you sure you want to delete {{this.username}}?"
                            hx-target="closest tr"
                            hx-swap="outerHTML swap:1s">
                            <i class="bi bi-trash"></i>
                          </button>
                        </div>
                      </td>
                    </tr>
                  {{/each}}
                {{else}}
                  <tr id="no-users-row">
                    <td colspan="5" class="text-center py-5">
                      <div class="d-flex flex-column align-items-center">
                        <i class="bi bi-person-x fs-1 mb-3 text-muted"></i>
                        <p class="mb-1 h5">No users found</p>
                        <p class="text-muted">Create your first user to get started</p>
                        <button type="button" class="btn btn-primary mt-2" data-bs-toggle="modal" data-bs-target="#createUserModal">
                          <i class="bi bi-person-plus me-1"></i> Add User
                        </button>
                      </div>
                    </td>
                  </tr>
                {{/if}}
              </tbody>
            </table>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- Create User Modal -->
<div class="modal fade" id="createUserModal" tabindex="-1" aria-labelledby="createUserModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="createUserModalLabel">Create New User</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <form id="createUserForm" hx-post="/api/v1/users/" hx-swap="none" class="needs-validation" novalidate>
          <div class="mb-3">
            <label for="username" class="form-label">Username</label>
            <input type="text" class="form-control" id="username" name="username" required
                   pattern="[a-zA-Z0-9_-]{3,20}" minlength="3" maxlength="20">
            <div class="form-text">Username must be 3-20 characters using letters, numbers, underscores or hyphens.</div>
            <div class="invalid-feedback">Please provide a valid username.</div>
          </div>
          <div class="mb-3">
            <label for="email" class="form-label">Email</label>
            <input type="email" class="form-control" id="email" name="email" required>
            <div class="invalid-feedback">Please provide a valid email address.</div>
          </div>
          <div class="mb-3">
            <label for="password" class="form-label">Password</label>
            <div class="input-group has-validation">
              <input type="password" class="form-control" id="password" name="password" required
                     minlength="8" aria-describedby="passwordHelp">
              <button class="btn btn-outline-secondary" type="button" id="togglePassword" aria-label="Toggle password visibility">
                <i class="bi bi-eye"></i>
              </button>
              <div class="invalid-feedback">Password must be at least 8 characters long.</div>
            </div>
            <div id="passwordHelp" class="form-text">Password must be at least 8 characters long.</div>
          </div>
          <div class="mb-3">
            <label for="role" class="form-label">Role</label>
            <select class="form-select" id="role" name="role" required aria-describedby="roleHelp">
              <option value="ADMIN">Admin</option>
              <option value="EDITOR">Editor</option>
              <option value="VIEWER" selected>Viewer</option>
            </select>
            <div id="roleHelp" class="form-text">
              <span class="badge bg-danger me-1">Admin</span> Full access to all features
              <br>
              <span class="badge bg-warning text-dark me-1">Editor</span> Can edit but not manage users
              <br>
              <span class="badge bg-info text-dark me-1">Viewer</span> Read-only access
            </div>
          </div>
          <input type="hidden" name="createdBy" id="createdBy" value="{{user.username}}">
        </form>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
        <button type="button" class="btn btn-primary" id="submitUserForm">
          Create User
        </button>
      </div>
    </div>
  </div>
</div>

<!-- Create Group Modal -->
<div class="modal fade" id="createGroupModal" tabindex="-1" aria-labelledby="createGroupModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="createGroupModalLabel">Create New Group</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <form id="createGroupForm" hx-post="/api/v1/group/" hx-swap="none" class="needs-validation" novalidate>
          <div class="mb-3">
            <label for="groupName" class="form-label">Group Name</label>
            <input type="text" class="form-control" id="groupName" name="name" required
                   minlength="2" maxlength="30">
            <div class="invalid-feedback">Group name must be between 2-30 characters.</div>
          </div>
          <div class="mb-3">
            <label for="description" class="form-label">Description</label>
            <textarea class="form-control" id="description" name="description" rows="3" 
                      maxlength="200" placeholder="Describe the purpose of this group"></textarea>
            <div class="form-text"><span id="descriptionCounter">0</span>/200 characters</div>
          </div>
          <input type="hidden" name="createdBy" value="{{user.username}}">
        </form>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
        <button type="button" class="btn btn-primary" id="submitGroupForm">
          Create Group
        </button>
      </div>
    </div>
  </div>
</div>

<script>
  // Toggle password visibility
  document.getElementById('togglePassword').addEventListener('click', function() {
    const passwordInput = document.getElementById('password');
    const type = passwordInput.getAttribute('type') === 'password' ? 'text' : 'password';
    passwordInput.setAttribute('type', type);
    this.querySelector('i').classList.toggle('bi-eye');
    this.querySelector('i').classList.toggle('bi-eye-slash');
  });

  // Form validation
  document.getElementById('submitUserForm').addEventListener('click', function() {
    const form = document.getElementById('createUserForm');
    if (!form.checkValidity()) {
      event.preventDefault();
      event.stopPropagation();
      form.classList.add('was-validated');
    } else {
      form.dispatchEvent(new Event('submit'));
    }
  });

  document.getElementById('submitGroupForm').addEventListener('click', function() {
    const form = document.getElementById('createGroupForm');
    if (!form.checkValidity()) {
      event.preventDefault();
      event.stopPropagation();
      form.classList.add('was-validated');
    } else {
      form.dispatchEvent(new Event('submit'));
    }
  });

  // Description character counter
  const descriptionTextarea = document.getElementById('description');
  const descriptionCounter = document.getElementById('descriptionCounter');
  
  descriptionTextarea.addEventListener('input', function() {
    const currentLength = this.value.length;
    descriptionCounter.textContent = currentLength;
    
    if (currentLength >= 180) {
      descriptionCounter.classList.add('text-danger');
    } else {
      descriptionCounter.classList.remove('text-danger');
    }
  });

  // User search functionality
  document.getElementById('userSearch').addEventListener('input', function() {
    const searchTerm = this.value.toLowerCase();
    const rows = document.querySelectorAll('#usersTable tbody tr:not(#no-users-row)');
    let visibleCount = 0;
    
    rows.forEach(row => {
      const username = row.querySelector('td:nth-child(1)').textContent.toLowerCase();
      const email = row.querySelector('td:nth-child(2)').textContent.toLowerCase();
      const groups = row.querySelector('td:nth-child(3)').textContent.toLowerCase();
      const role = row.querySelector('td:nth-child(4)').textContent.toLowerCase();
      
      if (username.includes(searchTerm) || email.includes(searchTerm) || 
          groups.includes(searchTerm) || role.includes(searchTerm)) {
        row.style.display = '';
        visibleCount++;
      } else {
        row.style.display = 'none';
      }
    });
    
    // Show "no results" message if no matches
    const noResultsRow = document.querySelector('#no-results-row');
    if (visibleCount === 0 && rows.length > 0) {
      if (!noResultsRow) {
        const tbody = document.querySelector('#usersTable tbody');
        const newRow = document.createElement('tr');
        newRow.id = 'no-results-row';
        newRow.innerHTML = `
          <td colspan="5" class="text-center py-4">
            <div class="d-flex flex-column align-items-center">
              <i class="bi bi-search fs-2 mb-2 text-muted"></i>
              <p class="mb-0">No users match "${this.value}"</p>
            </div>
          </td>
        `;
        tbody.appendChild(newRow);
      }
    } else if (noResultsRow) {
      noResultsRow.remove();
    }
  });

  // Handle successful form submissions
  document.body.addEventListener('htmx:afterOnLoad', function(event) {
    if (event.detail.xhr.status === 201 || event.detail.xhr.status === 200) {
      if (event.detail.requestConfig.path === '/api/v1/users/') {
        bootstrap.Modal.getInstance(document.getElementById('createUserModal')).hide();
        document.getElementById('createUserForm').reset();
        document.getElementById('createUserForm').classList.remove('was-validated');
        showToast('Success', 'User created successfully', 'success');
        window.location.reload();
      } else if (event.detail.requestConfig.path === '/api/v1/group/') {
        bootstrap.Modal.getInstance(document.getElementById('createGroupModal')).hide();
        document.getElementById('createGroupForm').reset();
        document.getElementById('createGroupForm').classList.remove('was-validated');
        showToast('Success', 'Group created successfully', 'success');
        window.location.reload();
      }
    } else if (event.detail.xhr.status >= 400) {
      try {
        const response = JSON.parse(event.detail.xhr.responseText);
        showToast('Error', response.message || 'An error occurred', 'danger');
      } catch (e) {
        showToast('Error', 'An unexpected error occurred', 'danger');
      }
    }
  });

  // Handle user deletion
  document.body.addEventListener('htmx:beforeSwap', function(event) {
    if (event.detail.requestConfig.verb === 'delete' && 
        event.detail.requestConfig.path.startsWith('/api/v1/users/')) {
      if (event.detail.xhr.status === 200 || event.detail.xhr.status === 204) {
        showToast('Success', 'User deleted successfully', 'success');
      } else {
        event.detail.shouldSwap = false;
        try {
          const response = JSON.parse(event.detail.xhr.responseText);
          showToast('Error', response.message || 'Failed to delete user', 'danger');
        } catch (e) {
          showToast('Error', 'Failed to delete user', 'danger');
        }
      }
    }
  });

  // Toast notification helper
  function showToast(title, message, type = 'info') {
    // Check if toast container exists, if not create it
    let toastContainer = document.querySelector('.toast-container');
    if (!toastContainer) {
      toastContainer = document.createElement('div');
      toastContainer.className = 'toast-container position-fixed bottom-0 end-0 p-3';
      document.body.appendChild(toastContainer);
    }
    
    // Create toast element
    const toastEl = document.createElement('div');
    toastEl.className = `toast align-items-center text-white bg-${type} border-0`;
    toastEl.setAttribute('role', 'alert');
    toastEl.setAttribute('aria-live', 'assertive');
    toastEl.setAttribute('aria-atomic', 'true');
    
    // Toast content
    toastEl.innerHTML = `
      <div class="d-flex">
        <div class="toast-body">
          <strong>${title}:</strong> ${message}
        </div>
        <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
      </div>
    `;
    
    // Add to container
    toastContainer.appendChild(toastEl);
    
    // Initialize and show toast
    const toast = new bootstrap.Toast(toastEl, {
      autohide: true,
      delay: 5000
    });
    toast.show();
    
    // Remove from DOM after hidden
    toastEl.addEventListener('hidden.bs.toast', function() {
      toastEl.remove();
    });
  }

  // Helper function to get first character for avatar
  function firstChar(str) {
    return str ? str.charAt(0).toUpperCase() : '?';
  }
  Handlebars.registerHelper('firstChar', firstChar);

  // Initialize tooltips
  var tooltipTriggerList = [].slice.call(document.querySelectorAll('[title]'));
  var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
    return new bootstrap.Tooltip(tooltipTriggerEl);
  });
</script>
